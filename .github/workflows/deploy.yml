# .github/workflows/deploy-to-ec2.yml
name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    # Crear archivo de clave SSH
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
    # Preparar el archivo de configuración AWS para EC2
    - name: Prepare AWS credentials file
      run: |
        mkdir -p aws-config
        cat > aws-config/credentials << EOL
        [default]
        aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        region = ${{ secrets.AWS_REGION }}
        EOL
        
    # Transferir credenciales AWS a EC2
    - name: Copy AWS credentials to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key_path: ~/.ssh/id_rsa
        source: "aws-config/credentials"
        target: "~/.aws/"
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key_path: ~/.ssh/id_rsa
        script: |
          # Asegurar que AWS CLI está instalado
          if ! command -v aws &> /dev/null; then
            echo "AWS CLI no encontrado, instalando..."
            sudo apt-get update && sudo apt-get install -y awscli || \
            sudo yum install -y awscli
          fi
          
          # Confirmar que tenemos las credenciales
          mkdir -p ~/.aws
          aws configure list
          
          # Detener y eliminar contenedores antiguos si existen (ignoramos errores)
          docker stop django-app || true
          docker rm django-app || true
          
          # Iniciar sesión en ECR utilizando las credenciales configuradas
          aws_account_id=$(aws sts get-caller-identity --query Account --output text)
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $aws_account_id.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          
          # Extraer la nueva imagen
          echo "Extrayendo imagen: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}"
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          
          # Ejecutar el nuevo contenedor
          echo "Ejecutando contenedor..."
          docker run -d \
            --name django-app \
            -p 8000:8000 \
            -e SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
            -e DEBUG=False \
            -e ALLOWED_HOSTS="${{ secrets.ALLOWED_HOSTS }}" \
            -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            -e DJANGO_SETTINGS_MODULE="excel_to_json.settings" \
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          
          echo "Despliegue completado"